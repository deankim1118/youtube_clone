. Install Node.js

. git init -> git remote add origin ${url}

. Install Express package using NPM

. NPM init

. Install Babel package => 최선 버전의 자바스크립트를 안정적인 버전으로 컨버트 해준다. -> Doc 참조.
    - npm install @babel/core @babel/node --save-dev
    - add env preset & Create babel.config.json 

. Install Nodemon package
    - package.json 에 scripts 추가 
    -  "scripts": {
            "dev": "nodemon --exec babel-node index.js" }
      이렇게 추가 해주고, 터미널에서 "npm run dev" 를 입력하면 자동으로 babel-node로 index.js를 실행해서 컨버팅해준다.
      nodemon을 사용하면 npm run dev를 입력할 필요없이 변경사항이 있으면 자동으로 재실행 해준다.
    - dependencies : babel, express, mongoose, nodemon, dotenv
        ### dotenv: config.env 파일이름으로 중요 String을 저장하면, process.env. 으로 다른곳에서 쓸 수 있다. 
            #### import 한 후에 -> dotenv.config({ path: './config.env' }); 면 사용가능! 
            #### 제일 먼저 작동하는 파일 제일 위에 한번만 import 해주면 된다!
            #### import 방식은 다른 패키지와 같은 방식으로 해줘야된다. require로 했으면 모두다 require, import 면 모두다 import

. Start Building Server with Express
    ### useful package : morgan => HTTP request logger middleware for node.js
    . Thinking about domain url
    . Make Router & Controller for each domain => Routers Module을 따로 만들어 주고 Controller(Handler) Module를 따로 만들어준다.
    . Install Pug & set engine in express to write for HTML 
        - make views Folder => views 라는 폴더는 유저가 보게 될 파일들을 넣어주는 곳이다. "views"라고 폴더 이름을 짓고 pug, html 등 파일을 폴더안에 만들어 주면 express 에서 views에 있는 파일들을 보여줄 것이다.
        - views 폴더가 있는 Directories 지정 => app.set("views", process.cwd() + "/views");
        - Set view engine => app.set("view engine", "pug"); view 엔진은 pug파일이라고 알려줘야 된다!
    . Writing HTML by pug 
        ### include 를 통해서 계속 반복되는 코드를 줄일 수 있다. ex) nav, footer, menu ect...
    . MVP.css => css는 나중에 백엔드를 하고 추가하기 때문에 MVP.css를 추가해 주면서 못생긴 html을 조금이나마 이쁘게 만들어주면서 진행할 수 있다.

. Install MongoDB and Mongosh and Moongoose
. Working with Moongoose Data base
    - mongoDB, mongoose database 만들어주고 -> connect
    - import db.js into server.js => import 만 하면 자동으로 실행된다.
    - Build Schema & Model
    - Build "CRUD"
    - Build middleware ### middleware 모델 전에 만들어서 실행되야 된다. ### static은 파이썬 클래스로 치면 Class.method를 추가하는 거다.
    - Build Routers & Controllers
    - Test with MongoDB Compass & Postman

. Build with MVC Logic 
    - Model & Views & Controllers

. Build User Authentication
    - bcrypt npm package which makes password to hash password & schema.pre() middleware 
    - express-session middleware package 를 사용하면 유저가 어느 행동을 할 때마다 session, cookie를 저장한다. 
        그래서 req.session에 접근할 수 있게 되고 req.session.someproperty 에 데이터를 저장할 수 있다 ex) req.session.loggedIn = true; req.session.user = user;
    - res.locals 는 express가 제공하는 전역변수이다. 예를 들어 res.locals.loggedInUser = req.session.user; 이렇게 저장하면 pug에서는 
        #{loggedInUser} 로 property를 사용할 수 있게 된다.
    - connect-mongo package. ### 쿠키에는 세션 데이터가 아닌 세션 ID만 저장된다. 세션 데이터는 서버 측에 저장되야한다. 하지만 express-session 의 기본 서버 측 세션 저장소인 MemoryStore는 production 환경용으로 설계되지 않았다. 그래서 다른 호환가능한 세션스토어를 사용해서 db에 저장해야된다. 
    그래야 서버가 재시작 되더라고 데이터가 사라지지 않는다. 그러나 웹사이트에 방문한 모든 방문자의 session을 저장할 필요는 없다. 비용만 올라간다.

.Github Authentication 
    - Doc URL: https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps
    - go to settings -> delveloper settings -> Register a new application -> callback URL: http://localhost:4000/users/github/finish
        ### callback URL을 설정해놓으면 Github에서 Authorize가 되면 내가 설정해놓은 콜백url로 userCode Token과 함께 Redirect 해준다.
    - ### url에 들어갈 configuration Params를 Object로 만들고, new URLSearchParams() 메소드를 사용하면 object를 url로 바꿔준다. 
        ex) const config = { client_id: 'kookie', scope = 'read:user user:email'} => client_id=&scope=kookie&user:email
    - github 가 준 userCode Token 을 access token으로 바꿔준다. async await fetch() 를 사용해서 Post로 요청! json()으로 바꿔준다.
    - Use the access token to access the Github API
        ### user의 정보를 어느정도 가져오느냐는 처음 로그인 url 보낼 때 scope: 설정하느냐에 달려있다
    - Github 에서 가져온 email 정도가 이미 MongoDB에 있는지 확인을 해야된다! 이미 로그인 email이 있으면 어떻게 할 지 결정해야된다.
    - req.session.detroy() 해주면 session을 지우면서 Logout 이 된다.

.User Profile
    - 직접 만들었던 middleware에서 로그인 하면 locals 에 req.session.user 정보를  저장되게 해놨기 때문에  pug에 locals에서 직접 데이터를 가져올 수 있다.
    - User Profile을 Update 해줄 때 user.session.user 정보도 update 해줘야 된다. findByIdAndUpdate(id, {new: true})라고 적어주면 update 된 새로운 document 를 리턴하고 그걸로 update 해주면 된다.
    - Change Password: #### save() or create() 을 하면 password hash를 하는 미들웨어를 만들어놨기 때문에.. update password를 하고 save()만 해주면 된다.
    - save()를 하면 hash하는 미들웨어 때문에 비밀번호가 계속 바뀐다. 그래서 if (this.isModified('passwaord')) {} 할 때만 hash로 바꿔준다.
    - profile은 누구나 볼 수 있어야 하므로 session에서 id를 가져오지 않고 url에서 id를 가져온다

.File Upload
    - use multer middleware npm package
    - Database 에는 절대 파일을 저장하지 않는다!! 파일경로만 저장하는거다!!
    - multer 에서 설정한 destination을 express에 알려줘야 된다. 그래서 app.use(destinationURL, express.static(root directory))을 해주면 폴더가 있는 곳에서 파일을 읽는다.
    - enctype='multipart/form-data' form encoding type을 꼭 입력해줘야된다.
    - filesize limit 도 걸 수 있고, 많은 옵션이 있다. Multer Doc 참조!
    - 서버가 재시작되거나 업데이트 하면 모든 파일을 다 날리게 된다. 그래서 파일은 다른 안전한 곳에 저장해야된다.

.Video Owner
    - Video.Schema 에 owner가 누구인지 User의 Id 를 넣어줘야 된다. type은 몽구스가 지원하는 id 타입이고 ref는 내가 만든 user의 모델이름을 입력한다.
        ### { type: mongoose.Schema.ObjectId, required: true, ref: 'User' } 
    - 그래서 session.user.id 와 Video.Schema.owner 에 있는 id를 비교해서 Video Owner에게만 편집기능을 보여준다!
    - Video.findById(id).populate('owner') 같이 populate() 메소드를 써주면 Video Model -> owner propety -> owner ref: 'User Model' 을 찾는다 그래서 owner 에 User 모델 정보가 들어오게 되서 User모델을 따로 불러와서 id를 찾을 필요없이 Video.owner._id 로 바로 찾을 수 있게된다.
    - User model 에는 videos: [{ type: mongoose.Schema.ObjectId, ref: 'Video' }] 로 설정해 주면 Video Model의 id가 들어간 array로 채워주면 upload 한 모든 비디오 url을 데이터베이스에 넣을 수 있다.
        ### Video 를 create 할 때 마다 push로 user.videos array 에 넣어줘야된다.

.Custom URL Middleware
    - 예를 들어, 로그인 안 한 유저가 edit profile page를 url로 그냥 들어가게 되었을 때 edit profile page가 보이면 안된다. 그래서 middleware를 만들어서 다른 url로 res.redirect 하게 해준다. middleware 는 라우터에서 Handler 옆에서 사용할 수 있다.

.Front end Javascript
    - 리액트나 리액트네이티브나 거의 모든 프레임워크에 Webpack이 내장되어 있어서 설정을 작성할 일이 없다.
    - 폴더는 Public 으로 공개되지 않기때문에 express 한테 app.use('/assets`', express.static('assets`')); static() 이라고 요청하면 어떤 폴더를 공개할지 정해주는거다
    - webpack 설정을 하고 정해진 폴더에 있는 자바스크립트 파일에서 코딩하면 webpack이 인코딩을 해준다. 
    - 사용할 loader를 설정해줘야된다. babel loader, scss loader
    - import style.scss file into js file.
    - MiniCssExtractPlugin를 사용해주면 css file을 js file에서 처리하지 않고 css file을 따로 만들어준다.
    - pug에 script(src='path of js file) 을 넣어주고 이제 프론트엔드 코딩을 시작!
    - 프론트 엔드 파일 저장할 때 마다 백엔드 서버가 다시 시작되서 nodemon.json 에 ignore 설정을 해줘야된다.

.Video Player
    - setTimeout(fn, seconds) 으로 시간을 설정할 수 있다.그리고 id를 리턴한다. 마지막에는 원하는 함수를 실행하지만 실행되기 전에 계속 Event가 있을 때는 마지막 함수가 실행 안되게 할려면 Event가 있는 동안 clearTimeout(id)으로 setTimeout()을 계속 취소시켜준다. 그리고 Event가 더이상 없을 때 마지막에 함수가 실행될 것이다. 
    - html Javascript 로 DOM으로 할 수 있는게 너무 많다. 그리고 CSS로 style!

### Other Stuff to remeber
    - req.params or req.query 에서 숫자는 모두 String 이다. 그래서 계산을 할려면 *1 을 해주면 Number로 타입이 자동으로 바뀐다!


###  All using Packages
  "dependencies": {
    "bcrypt": "^5.1.1",
    "connect-mongo": "^5.1.0",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "express-session": "^1.18.0",
    "mongoose": "^8.2.4",
    "multer": "^1.4.5-lts.1",
  },
  "devDependencies": {
    "@babel/core": "^7.24.3",
    "@babel/node": "^7.23.9",
    "@babel/preset-env": "^7.24.3",
    "morgan": "^1.10.0",
    "nodemon": "^3.1.0",
    "pug": "^3.0.2"
  }