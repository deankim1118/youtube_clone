. Install Node.js

. git init -> git remote add origin ${url}

. Install Express package using NPM

. NPM init

. Install Babel package => 최선 버전의 자바스크립트를 안정적인 버전으로 컨버트 해준다. -> Doc 참조.
    - npm install @babel/core @babel/node --save-dev
    - add env preset & Create babel.config.json 

. Install Nodemon package
    - package.json 에 scripts 추가 
    -  "scripts": {
            "dev": "nodemon --exec babel-node index.js" }
      이렇게 추가 해주고, 터미널에서 "npm run dev" 를 입력하면 자동으로 babel-node로 index.js를 실행해서 컨버팅해준다.
      nodemon을 사용하면 npm run dev를 입력할 필요없이 변경사항이 있으면 자동으로 재실행 해준다.
    - dependencies : babel, express, mongoose, nodemon, dotenv
        ### dotenv: config.env 파일이름으로 중요 String을 저장하면, process.env. 으로 다른곳에서 쓸 수 있다. 
            #### import 한 후에 -> dotenv.config({ path: './config.env' }); 면 사용가능! 
            #### 제일 먼저 작동하는 파일 제일 위에 한번만 import 해주면 된다!
            #### import 방식은 다른 패키지와 같은 방식으로 해줘야된다. require로 했으면 모두다 require, import 면 모두다 import

. Start Building Server with Express
    ### useful package : morgan => HTTP request logger middleware for node.js
    . Thinking about domain url
    . Make Router & Controller for each domain => Routers Module을 따로 만들어 주고 Controller(Handler) Module를 따로 만들어준다.
    . Install Pug & set engine in express to write for HTML 
        - make views Folder => views 라는 폴더는 유저가 보게 될 파일들을 넣어주는 곳이다. "views"라고 폴더 이름을 짓고 pug, html 등 파일을 폴더안에 만들어 주면 express 에서 views에 있는 파일들을 보여줄 것이다.
        - views 폴더가 있는 Directories 지정 => app.set("views", process.cwd() + "/views");
        - Set view engine => app.set("view engine", "pug"); view 엔진은 pug파일이라고 알려줘야 된다!
    . Writing HTML by pug 
        ### include 를 통해서 계속 반복되는 코드를 줄일 수 있다. ex) nav, footer, menu ect...
    . MVP.css => css는 나중에 백엔드를 하고 추가하기 때문에 MVP.css를 추가해 주면서 못생긴 html을 조금이나마 이쁘게 만들어주면서 진행할 수 있다.

. Install MongoDB and Mongosh and Moongoose
. Working with Moongoose Data base
    - mongoDB, mongoose database 만들어주고 -> connect
    - import db.js into server.js => import 만 하면 자동으로 실행된다.
    - Build Schema & Model
    - Build "CRUD"
    - Build middleware ### middleware 모델 전에 만들어서 실행되야 된다. ### static은 파이썬 클래스로 치면 Class.method를 추가하는 거다.
    - Build Routers & Controllers
    - Test with MongoDB Compass & Postman

. Build with MVC Logic 
    - Model & Views & Controllers

. Build User Authentication
    - bcrypt npm package which makes password to hash password & schema.pre() middleware 
    - express-session middleware package 를 사용하면 유저가 어느 행동을 할 때마다 session, cookie를 저장한다. 
        그래서 req.session에 접근할 수 있게 되고 req.session.someproperty 에 데이터를 저장할 수 있다 ex) req.session.loggedIn = true; req.session.user = user;
    - res.locals 는 express가 제공하는 전역변수이다. 예를 들어 res.locals.loggedInUser = req.session.user; 이렇게 저장하면 pug에서는 
        #{loggedInUser} 로 property를 사용할 수 있게 된다.
    - connect-mongo package. ### 쿠키에는 세션 데이터가 아닌 세션 ID만 저장된다. 세션 데이터는 서버 측에 저장되야한다. 하지만 express-session 의 기본 서버 측 세션 저장소인 MemoryStore는 production 환경용으로 설계되지 않았다. 그래서 다른 호환가능한 세션스토어를 사용해서 db에 저장해야된다. 
    그래야 서버가 재시작 되더라고 데이터가 사라지지 않는다. 그러나 웹사이트에 방문한 모든 방문자의 session을 저장할 필요는 없다. 비용만 올라간다.

.Github Authentication 
    - Doc URL: https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps
    - go to settings -> delveloper settings -> Register a new application -> callback URL: http://localhost:4000/users/github/finish
        ### callback URL을 설정해놓으면 Github에서 Authorize가 되면 내가 설정해놓은 콜백url로 userCode Token과 함께 Redirect 해준다.
    - ### url에 들어갈 configuration Params를 Object로 만들고, new URLSearchParams() 메소드를 사용하면 object를 url로 바꿔준다. 
        ex) const config = { client_id: 'kookie', scope = 'read:user user:email'} => client_id=&scope=kookie&user:email
    - github 가 준 userCode Token 을 access token으로 바꿔준다. async await fetch() 를 사용해서 Post로 요청! json()으로 바꿔준다.
    - Use the access token to access the API


### Other Stuff to remeber
    - req.params or req.query 에서 숫자는 모두 String 이다. 그래서 계산을 할려면 *1 을 해주면 Number로 타입이 자동으로 바뀐다!


###  All using Packages
  "dependencies": {
    "bcrypt": "^5.1.1",
    "connect-mongo": "^5.1.0",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "express-session": "^1.18.0",
    "mongoose": "^8.2.4",
  },
  "devDependencies": {
    "@babel/core": "^7.24.3",
    "@babel/node": "^7.23.9",
    "@babel/preset-env": "^7.24.3",
    "morgan": "^1.10.0",
    "nodemon": "^3.1.0",
    "pug": "^3.0.2"
  }