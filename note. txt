. Install Node.js

. git init -> git remote add origin ${url}

. Install Express package using NPM

. NPM init

. Install Babel package => 최선 버전의 자바스크립트를 안정적인 버전으로 컨버트 해준다. -> Doc 참조.
    - npm install @babel/node --save-dev 도 인스톨 해준다.
    - add env preset & Create babel.config.json 

. Install Nodemon package
    - package.json 에 scripts 추가 
    -  "scripts": {
            "dev": "nodemon --exec babel-node index.js" }
      이렇게 추가 해주고, 터미널에서 "npm run dev" 를 입력하면 자동으로 babel-node로 index.js를 실행해서 컨버팅해준다.
      nodemon을 사용하면 npm run dev를 입력할 필요없이 변경사항이 있으면 자동으로 재실행 해준다.

. Start Building Server with Express
    ### useful package : morgan => HTTP request logger middleware for node.js
    . Thinking about domain url
    . Make Router & Controller for each domain => Routers Module을 따로 만들어 주고 Controller(Handler) Module를 따로 만들어준다.
    . Install Pug & set engine in express to write for HTML 
        - make views Folder => views 라는 폴더는 유저가 보게 될 파일들을 넣어주는 곳이다. "views"라고 폴더 이름을 짓고 pug, html 등 파일을 폴더안에 만들어 주면 express 에서 views에 있는 파일들을 보여줄 것이다.
        - views 폴더가 있는 Directories 지정 => app.set("views", process.cwd() + "/views");
        - Set view engine => app.set("view engine", "pug"); view 엔진은 pug파일이라고 알려줘야 된다!
    . Writing HTML by pug 
        ### include 를 통해서 계속 반복되는 코드를 줄일 수 있다. ex) nav, footer, menu ect...
    . MVP.css => css는 나중에 백엔드를 하고 추가하기 때문에 MVP.css를 추가해 주면서 못생긴 html을 조금이나마 이쁘게 만들어주면서 진행할 수 있다.

. Install MongoDB and Mongosh and Moongoose
. Working with Moongoose Data base
    - import db.js into server.js => import 만 하면 자동으로 실행된다.
    - Build Schema & Model
    - Build "CRUD"
    - Build middleware ### middleware 모델 전에 만들어서 실행되야 된다. ### static은 파이썬 클래스로 치면 Class.method를 추가하는 거다.